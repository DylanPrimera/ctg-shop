// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  emailVerified DateTime?
  image         String?
  name          String
  password      String
  role          Role         @default(user)
  address       UserAddress?
  order         Order[]
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id          String         @id @default(uuid())
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  String
  description String?
  gender      Gender
  inStock     Int
  images      ProductImage[]
  price       Float          @default(0)
  tags        String[]       @default([])
  title       String
  sizes       Size[]         @default([])
  slug        String         @unique
  OrderItem   OrderItem[]

  @@index([gender])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Country {
  id           String         @id
  name         String
  Address      UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  address1  String
  address2  String?
  zipCode   String
  city      String
  phone     String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  taxes        Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  userId       String
  orderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  address1  String
  address2  String?
  zipCode   String
  city      String
  phone     String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
